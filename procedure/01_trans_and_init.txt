
# python trans_and_init.py VGG_ILSVRC_16_layers.prototxt VGG_ILSVRC_16_layers.caffemodel voc_fcn32s_deploy.prototxt voc_fcn32s_trans_init.caffemodel

NOTE:
download trained VGG model from http://www.robots.ox.ac.uk/~vgg/research/very_deep/

Output:
======== source network architecture ========
data	(1, 3, 224, 224)
conv1_1	(1, 64, 224, 224)
conv1_2	(1, 64, 224, 224)
pool1	(1, 64, 112, 112)
conv2_1	(1, 128, 112, 112)
conv2_2	(1, 128, 112, 112)
pool2	(1, 128, 56, 56)
conv3_1	(1, 256, 56, 56)
conv3_2	(1, 256, 56, 56)
conv3_3	(1, 256, 56, 56)
pool3	(1, 256, 28, 28)
conv4_1	(1, 512, 28, 28)
conv4_2	(1, 512, 28, 28)
conv4_3	(1, 512, 28, 28)
pool4	(1, 512, 14, 14)
conv5_1	(1, 512, 14, 14)
conv5_2	(1, 512, 14, 14)
conv5_3	(1, 512, 14, 14)
pool5	(1, 512, 7, 7)
fc6	(1, 4096)
fc7	(1, 4096)
fc8	(1, 1000)
prob	(1, 1000)
====== destination network architecture =====
data	(1, 3, 500, 500)
data_input_0_split_0	(1, 3, 500, 500)
data_input_0_split_1	(1, 3, 500, 500)
conv1_1	(1, 64, 698, 698)
conv1_2	(1, 64, 698, 698)
pool1	(1, 64, 349, 349)
conv2_1	(1, 128, 349, 349)
conv2_2	(1, 128, 349, 349)
pool2	(1, 128, 175, 175)
conv3_1	(1, 256, 175, 175)
conv3_2	(1, 256, 175, 175)
conv3_3	(1, 256, 175, 175)
pool3	(1, 256, 88, 88)
conv4_1	(1, 512, 88, 88)
conv4_2	(1, 512, 88, 88)
conv4_3	(1, 512, 88, 88)
pool4	(1, 512, 44, 44)
conv5_1	(1, 512, 44, 44)
conv5_2	(1, 512, 44, 44)
conv5_3	(1, 512, 44, 44)
pool5	(1, 512, 22, 22)
fc6	(1, 4096, 16, 16)
fc7	(1, 4096, 16, 16)
score_fr	(1, 21, 16, 16)
upscore	(1, 21, 544, 544)
score	(1, 21, 500, 500)
========= source network parameters =========
conv1_1	(64, 3, 3, 3)
conv1_2	(64, 64, 3, 3)
conv2_1	(128, 64, 3, 3)
conv2_2	(128, 128, 3, 3)
conv3_1	(256, 128, 3, 3)
conv3_2	(256, 256, 3, 3)
conv3_3	(256, 256, 3, 3)
conv4_1	(512, 256, 3, 3)
conv4_2	(512, 512, 3, 3)
conv4_3	(512, 512, 3, 3)
conv5_1	(512, 512, 3, 3)
conv5_2	(512, 512, 3, 3)
conv5_3	(512, 512, 3, 3)
fc6	(4096, 25088)
fc7	(4096, 4096)
fc8	(1000, 4096)
======= destination network parameters ======
conv1_1	(64, 3, 3, 3)
conv1_2	(64, 64, 3, 3)
conv2_1	(128, 64, 3, 3)
conv2_2	(128, 128, 3, 3)
conv3_1	(256, 128, 3, 3)
conv3_2	(256, 256, 3, 3)
conv3_3	(256, 256, 3, 3)
conv4_1	(512, 256, 3, 3)
conv4_2	(512, 512, 3, 3)
conv4_3	(512, 512, 3, 3)
conv5_1	(512, 512, 3, 3)
conv5_2	(512, 512, 3, 3)
conv5_3	(512, 512, 3, 3)
fc6	(4096, 512, 7, 7)
fc7	(4096, 4096, 1, 1)
score_fr	(21, 4096, 1, 1)
upscore	(21, 21, 64, 64)
================= transfer ==================
copying conv1_1  ->  conv1_1 0
copying conv1_1  ->  conv1_1 1
copying conv1_2  ->  conv1_2 0
copying conv1_2  ->  conv1_2 1
copying conv2_1  ->  conv2_1 0
copying conv2_1  ->  conv2_1 1
copying conv2_2  ->  conv2_2 0
copying conv2_2  ->  conv2_2 1
copying conv3_1  ->  conv3_1 0
copying conv3_1  ->  conv3_1 1
copying conv3_2  ->  conv3_2 0
copying conv3_2  ->  conv3_2 1
copying conv3_3  ->  conv3_3 0
copying conv3_3  ->  conv3_3 1
copying conv4_1  ->  conv4_1 0
copying conv4_1  ->  conv4_1 1
copying conv4_2  ->  conv4_2 0
copying conv4_2  ->  conv4_2 1
copying conv4_3  ->  conv4_3 0
copying conv4_3  ->  conv4_3 1
copying conv5_1  ->  conv5_1 0
copying conv5_1  ->  conv5_1 1
copying conv5_2  ->  conv5_2 0
copying conv5_2  ->  conv5_2 1
copying conv5_3  ->  conv5_3 0
copying conv5_3  ->  conv5_3 1
coercing fc6 0 from (4096, 25088) to (4096, 512, 7, 7)
copying fc6  ->  fc6 1
coercing fc7 0 from (4096, 4096) to (4096, 4096, 1, 1)
copying fc7  ->  fc7 1
dropping fc8
================ initialize =================
upscore
=============================================
